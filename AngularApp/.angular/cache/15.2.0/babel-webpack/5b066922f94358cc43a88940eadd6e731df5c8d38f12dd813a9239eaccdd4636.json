{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { EmployeeService } from '../shared/employee.service';\nimport { Employee } from '../shared/employee.model';\nlet EmployeeComponent = class EmployeeComponent {\n  constructor(pripublicvate, employeeService) {}\n  ngOnInit() {\n    this.resetForm();\n  }\n  refreshEmployeeList() {\n    this.employeeService.getEmployeeList().subscribe(res => {\n      this.employeeService.employees = res;\n    });\n  }\n  resetForm(form) {\n    if (form) {\n      form.reset();\n      this.refreshEmployeeList();\n    }\n    this.employeeService.selectedEmployee = new Employee();\n    onSubmit(form, NgForm);\n    {\n      if (form.value._id == \"\") {\n        this.employeeService.postEmployee(form.value).subscribe(res => {\n          this.resetForm(form);\n          this.refreshEmployeeList();\n          M.toast({\n            html: 'Saved successfully',\n            classes: 'rounded'\n          });\n        });\n      } else {\n        this.employeeService.putEmployee(form.value).subscribe(res => {\n          this.resetForm(form);\n          this.refreshEmployeeList();\n          M.toast({\n            html: 'Updated successfully',\n            classes: 'rounded'\n          });\n        });\n      }\n    }\n    onEdit(emp, Employee);\n    {\n      this.employeeService.selectedEmployee = emp;\n    }\n    onDelete(_id, String, form, NgForm);\n    {\n      if (confirm('Are you sure to delete this record ?') == true) {\n        this.employeeService.deleteEmployee(_id).subscribe(res => {\n          this.refreshEmployeeList();\n          this.resetForm(form);\n          M.toast({\n            html: 'Deleted successfully',\n            classes: 'rounded'\n          });\n        });\n      }\n    }\n  }\n};\nEmployeeComponent = __decorate([Component({\n  selector: 'app-employee',\n  templateUrl: './employee.component.html',\n  styleUrls: ['./employee.component.css'],\n  providers: [EmployeeService]\n})], EmployeeComponent);\nexport { EmployeeComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAASC,MAAM,QAAQ,gBAAgB;AACvC,SAASC,eAAe,QAAQ,4BAA4B;AAC5D,SAASC,QAAQ,QAAQ,0BAA0B;AAU5C,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAC5BC,YAAYC,aAAa,EAACC,eAAgC,GAE1D;EAEAC,QAAQ;IACN,IAAI,CAACC,SAAS,EAAE;EAClB;EAEAC,mBAAmB;IACjB,IAAI,CAACH,eAAe,CAACI,eAAe,EAAE,CAACC,SAAS,CAAEC,GAAG,IAAI;MACvD,IAAI,CAACN,eAAe,CAACO,SAAS,GAAGD,GAAiB;IACpD,CAAC,CAAC;EACJ;EAEAJ,SAAS,CAACM,IAAc;IACtB,IAAGA,IAAI,EAAE;MACPA,IAAI,CAACC,KAAK,EAAE;MACZ,IAAI,CAACN,mBAAmB,EAAE;;IAG5B,IAAI,CAACH,eAAe,CAACU,gBAAgB,GAAG,IAAId,QAAQ,EAAE;IAEtDe,QAAQ,CAACH,IAAI,EAAEd,MAAM,CAAC;IAAC;MACrB,IAAIc,IAAI,CAACI,KAAK,CAACC,GAAG,IAAI,EAAE,EAAE;QACxB,IAAI,CAACb,eAAe,CAACc,YAAY,CAACN,IAAI,CAACI,KAAK,CAAC,CAACP,SAAS,CAAEC,GAAG,IAAI;UAC9D,IAAI,CAACJ,SAAS,CAACM,IAAI,CAAC;UACpB,IAAI,CAACL,mBAAmB,EAAE;UAC1BY,CAAC,CAACC,KAAK,CAAC;YAAEC,IAAI,EAAE,oBAAoB;YAAEC,OAAO,EAAE;UAAS,CAAE,CAAC;QAC7D,CAAC,CAAC;OACH,MACI;QACH,IAAI,CAAClB,eAAe,CAACmB,WAAW,CAACX,IAAI,CAACI,KAAK,CAAC,CAACP,SAAS,CAAEC,GAAG,IAAI;UAC7D,IAAI,CAACJ,SAAS,CAACM,IAAI,CAAC;UACpB,IAAI,CAACL,mBAAmB,EAAE;UAC1BY,CAAC,CAACC,KAAK,CAAC;YAAEC,IAAI,EAAE,sBAAsB;YAAEC,OAAO,EAAE;UAAS,CAAE,CAAC;QAC/D,CAAC,CAAC;;;IAINE,MAAM,CAACC,GAAG,EAAEzB,QAAQ,CAAC;IAAC;MACpB,IAAI,CAACI,eAAe,CAACU,gBAAgB,GAAGW,GAAG;;IAG7CC,QAAQ,CAACT,GAAG,EAAEU,MAAM,EAAEf,IAAI,EAAEd,MAAM,CAAC;IAAC;MAClC,IAAI8B,OAAO,CAAC,sCAAsC,CAAC,IAAI,IAAI,EAAE;QAC3D,IAAI,CAACxB,eAAe,CAACyB,cAAc,CAACZ,GAAG,CAAC,CAACR,SAAS,CAAEC,GAAG,IAAI;UACzD,IAAI,CAACH,mBAAmB,EAAE;UAC1B,IAAI,CAACD,SAAS,CAACM,IAAI,CAAC;UACpBO,CAAC,CAACC,KAAK,CAAC;YAAEC,IAAI,EAAE,sBAAsB;YAAEC,OAAO,EAAE;UAAS,CAAE,CAAC;QAC/D,CAAC,CAAC;;;EAIR;CACD;AAvDYrB,iBAAiB,eAN7BJ,SAAS,CAAC;EACTiC,QAAQ,EAAE,cAAc;EACxBC,WAAW,EAAE,2BAA2B;EACxCC,SAAS,EAAE,CAAC,0BAA0B,CAAC;EACvCC,SAAS,EAAE,CAAClC,eAAe;CAC5B,CAAC,GACWE,iBAAiB,CAuD7B;SAvDYA,iBAAiB","names":["Component","NgForm","EmployeeService","Employee","EmployeeComponent","constructor","pripublicvate","employeeService","ngOnInit","resetForm","refreshEmployeeList","getEmployeeList","subscribe","res","employees","form","reset","selectedEmployee","onSubmit","value","_id","postEmployee","M","toast","html","classes","putEmployee","onEdit","emp","onDelete","String","confirm","deleteEmployee","selector","templateUrl","styleUrls","providers"],"sourceRoot":"","sources":["C:\\Users\\hp\\Desktop\\University Stuff\\Web Tech\\Labs\\Angular CEP Lab\\AngularApp\\src\\app\\employee\\employee.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms'\nimport { EmployeeService } from '../shared/employee.service';\nimport { Employee } from '../shared/employee.model';\n\ndeclare var M: any;\n\n@Component({\n  selector: 'app-employee',\n  templateUrl: './employee.component.html',\n  styleUrls: ['./employee.component.css'],\n  providers: [EmployeeService]\n})\nexport class EmployeeComponent implements OnInit {\n  constructor(pripublicvate employeeService: EmployeeService) {\n\n  }\n\n  ngOnInit() {\n    this.resetForm()\n  }\n\n  refreshEmployeeList() {\n    this.employeeService.getEmployeeList().subscribe((res) => {\n      this.employeeService.employees = res as Employee[];\n    });\n  }\n\n  resetForm(form? : NgForm) {\n    if(form) {\n      form.reset()\n      this.refreshEmployeeList();\n    }\n\n    this.employeeService.selectedEmployee = new Employee();\n\n    onSubmit(form: NgForm) {\n      if (form.value._id == \"\") {\n        this.employeeService.postEmployee(form.value).subscribe((res) => {\n          this.resetForm(form);\n          this.refreshEmployeeList();\n          M.toast({ html: 'Saved successfully', classes: 'rounded' });\n        });\n      }\n      else {\n        this.employeeService.putEmployee(form.value).subscribe((res) => {\n          this.resetForm(form);\n          this.refreshEmployeeList();\n          M.toast({ html: 'Updated successfully', classes: 'rounded' });\n        });\n      }\n    }\n  \n    onEdit(emp: Employee) {\n      this.employeeService.selectedEmployee = emp;\n    }\n  \n    onDelete(_id: String, form: NgForm) {\n      if (confirm('Are you sure to delete this record ?') == true) {\n        this.employeeService.deleteEmployee(_id).subscribe((res) => {\n          this.refreshEmployeeList();\n          this.resetForm(form);\n          M.toast({ html: 'Deleted successfully', classes: 'rounded' });\n        });\n      }\n    }\n\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}